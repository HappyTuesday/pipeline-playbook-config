import com.yit.deploy.core.exceptions.ProcessExecutionException
import com.yit.deploy.core.model.Environment
import com.yit.deploy.core.model.Job

void generate(Environment env, Iterable<Job> jobs) {
    generateJobs(env, jobs)
    generateViews(env, jobs)
}

void generateJobs(Environment env, Iterable<Job> jobs) {
    for (def job in jobs) {
        generateJob(env, job)
    }
}

static int getSavedLogsNumber(def env) {
    env.name == "prod" ? 50 : 10
}

void generateJob(Environment env, Job job) {

    pipelineJob(job.jobName) {
        description(job.project.description ?: """\
            This job is generated by job seed at ${new Date().format('yyyy-MM-dd HH:mm:ss')}.
            Please DONOT modify it manually since it may be overrided.
        """.stripIndent())

        parameters {
            for (def p in job.userParameters) {
                def parameterDesc = p.description ?: "Parameter $p.parameterName for $job.projectName"
                if (p.hidden) {
                    hiddenParameterDefinition {
                        name p.parameterName
                        defaultValue((p.defaultValue as String) ?: "")
                        description parameterDesc
                    }
                } else if (p.type == 'boolean') {
                    booleanParam(p.parameterName, p.defaultValue != null && p.defaultValue, parameterDesc)
                } else if (p.type == 'string') {
                    if (p.choices != null && !p.choices.empty) {
                        choiceParam(p.parameterName, p.choices, parameterDesc)
                    } else {
                        stringParam(p.parameterName, p.defaultValue as String ?: "", parameterDesc)
                    }
                } else if (p.type == 'text') {
                    textParam(p.parameterName, p.defaultValue as String ?: "", parameterDesc)
                } else if (p.type == 'projectBranch') {
                    projectBranchParameterDefinition {
                        name p.parameterName
                        defaultValue((p.defaultValue as String) ?: "")
                        projectName job.projectName
                        targetSyncJobName "yit-$env.name-sync-environment".toString()
                        description parameterDesc
                        readonly p.options && p.options.readonly
                    }
                } else if (p.type == "deployInventory") {
                    deployPlanParameterDefinition {
                        name 'deployInventory'
                        envName env.name
                        predefinedInventoryListJson p.options.predefinedInventoryListJson
                        jobName job.jobName
                        defaultInventoryName p.options.defaultInventoryName
                        description 'Add deploy inventory (plans) here to schedule your release progress'
                    }
                } else {
                    throw new IllegalArgumentException("invalid parameter type: $p.type")
                }
            }
        }

        configure { project ->
            def pd = project / 'properties' / 'hudson.model.ParametersDefinitionProperty' / 'parameterDefinitions'
            if (job.plays.size() > 0) {
                pd << 'com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition' {
                    name 'tags'
                    description 'choose the steps which you want to do'
                    type 'PT_CHECKBOX'
                    multiSelectDelimiter ','
                    value job.plays.join(',')
                    defaultValue job.plays.join(',')
                    descriptionPropertyValue job.plays.join(',')
                    visibleItemCount 1000
                }
            }

            def serverDescList = job.servers.collect{"${retrieveServerHostname(env, it)} [$it]"}.join(',')
            if (job.servers.size() > 0) {
                pd << 'com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition' {
                    name 'servers'
                    description 'choose the servers on which the above selected steps will be done'
                    type 'PT_CHECKBOX'
                    multiSelectDelimiter ','
                    value job.servers.join(',')
                    defaultValue job.servers.join(',')
                    descriptionPropertyValue serverDescList
                    visibleItemCount 1000
                }
            }

            if (job.tasks.size() > 0) {
                pd << 'com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition' {
                    name 'skip_tags'
                    description 'choose the steps which you want to skip'
                    type 'PT_CHECKBOX'
                    multiSelectDelimiter ','
                    value job.tasks.join(',')
                    defaultValue job.tasksToSkip.join(',')
                    descriptionPropertyValue job.tasks.join(',')
                    visibleItemCount 1000
                }
            }
        }

        definition {
            if (job.gitRepositoryUrl) {
                cpsScm {
                    scm {
                        git {
                            def repository = job.gitRepositoryUrl
                            def branchName = job.defaultBranchName ?: "master"

                            remote {
                                name "origin"
                                url repository
                            }
                            branch ("refs/heads/" + branchName)
                            // branch ("refs/heads/noncps")
                            extensions {}
                        }
                    }
                    scriptPath "Jenkinsfile"
                }
            } else {
                cps {
                    script "node { deployProject params }"
                    sandbox true
                }
            }
        }

        configure { project ->
            (project / definition / lightweight).value = true
        }

        logRotator {
            numToKeep getSavedLogsNumber(env)
        }

        if (job.schedule){
            triggers {
                cron job.schedule
            }
        }
    }
}

String retrieveServerHostname(Environment env, String ipAddressOrHostname) {
    if (ipAddressOrHostname == 'localhost') {
        return 'jenkins-server'
    } else if (env.name == 'local') {
        return ipAddressOrHostname
    } else {
        try {
            return env.getHost(ipAddressOrHostname).hostname
        } catch (ProcessExecutionException e) {
            println("failed to determine hostname for " + ipAddressOrHostname)
            return ipAddressOrHostname
        }
    }
}

void generateViews(Environment env, Iterable<Job> $jobs) {
    sectionedView(env.name) {
        description "All CI jobs for environment ${env.name}."
        sections {
            for (entry in $jobs.groupBy{it.sectionName}.sort{it.value.jobOrder.min()}) {
                def sectionName = entry.key.toUpperCase()
                def allJobNames = entry.value.jobName
                listView {
                    name(sectionName)
                    jobs {
                        names(allJobNames as String[])
                    }

                    columns {
                        status()
                        weather()
                        buildButton()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                    }
                }
            }
        }
    }
}

generate env, jobs
